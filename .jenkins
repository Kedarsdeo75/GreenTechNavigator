pipeline {
    agent any
    
    environment {
	    PROJECT_NAME = "Sample Application"
		REPO_PATH = "C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\GreenTechNavigator@2"
		PYTHON_PATH = "F:\\python\\python.exe"
		PYTEST_PATH = "F:\\python\\Scripts\\pytest.exe"
		PATH = "E:\\maven\\apache-maven-3.8.6-bin\\apache-maven-3.8.6\\bin;$PATH"
		SHAREPOINT_PS_SCRIPT_PATH = 'C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\GreenTechNavigator@2\\upload_to_sharepoint.ps1'
    }
    
    stages {
        stage('Stage 1: Clone Repository') {
            steps {
                echo "Project Name: ${env.PROJECT_NAME}"
                ws("${env.REPO_PATH}") {
                    git branch: 'main', credentialsId: '4052c696-741c-4e3d-a988-e7263162018e', url: 'https://github.com/Kedarsdeo75/GreenTechNavigator.git'
                }
            }
        }
        stage('Stage 2: Track Server Emissions') {
            steps {
                dir("${env.REPO_PATH}") {
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        bat "${env.PYTHON_PATH} server_emissions.py"
                    }
                }
            }
        }
        stage('Stage 3: Green Code Refiner') {
            steps {
                dir("${env.REPO_PATH}") {
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        script {
                            def result = ''
                            while (true) {
                                result = bat(script: "${env.PYTHON_PATH} GreenCodeRefiner.py", returnStdout: true).trim()
                                if (result.contains('Script-Has-Uploaded-All-Files')) {
                                    break
                                } else if (result.contains('Script-Has-Remain-Some-Files-To-Uploaded')) {
                                    echo "Rerunning GreenCodeRefiner.py due to pending tasks..."
                                } else {
                                    error "Unexpected result from GreenCodeRefiner.py: ${result}"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Stage 4: Dynamic Code Analysis') {
            steps {
                dir("${env.REPO_PATH}") {
                    withEnv(["PYTEST=${env.PYTEST_PATH}"]) {
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                            bat "${env.PYTHON_PATH} track_emissions.py"
                        }
                    }
                }
            }
        }
        stage('Stage 5: Compare emission') {
            steps {
                dir("${env.REPO_PATH}") {
                    withEnv(["PYTEST=${env.PYTEST_PATH}"]) {
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                            bat "${env.PYTHON_PATH} compare_emissions.py"
                        }
                    }
                }
            }
        }
        stage('Stage 6: Update Dashboard') {
            steps {
                powershell """
                & '${env.SHAREPOINT_PS_SCRIPT_PATH}'
                """
            }
        }
    }
}
